name: Validate Code

on: pull_request

jobs:
  validate:
    runs-on: ubuntu-latest

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: troubleshooting
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          git remote -v
          git branch -a
          echo "$GITHUB_CONTEXT"

      - name: 'Install pnpm'
        id: pnpm-setup
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Dump pnpm outputs
        env:
          PNPM_CONTEXT: ${{ toJson(steps.pnpm-setup.outputs) }}
        run: |
          echo "$PNPM_CONTEXT"
          echo "PNPM_HOME: $PNPM_HOME"

      - uses: codfish/actions/setup-node-and-install@fixes

      - name: semantic release dry run
        uses: docker://ghcr.io/codfish/semantic-release-action@sha256:327a3ce08284f9dd9b83b607e3f668dae90139e68ce90780b0a43a09d577dc3a
        with:
          dry-run: true
          additional-packages: |
            ['@google/semantic-release-replace-plugin', '@semantic-release/git', 'conventional-changelog-conventionalcommits@7']
          plugins: |
            [
              '@semantic-release/commit-analyzer',
              [
                '@google/semantic-release-replace-plugin',
                {
                  'replacements': [
                    {
                      'files': ['Dockerfile'],
                      'from': 'RELEASE_VERSION=.*',
                      'to': 'RELEASE_VERSION=${nextRelease.version}'
                    },
                    {
                      'files': ['provisioning/Chart.yml'],
                      'from': 'ersion: .*',
                      'to': 'ersion: ${nextRelease.version}'
                    }
                  ]
                }
              ],
              [ '@semantic-release/git', {'assets': ['Dockerfile', 'provisioning/Chart.yml']} ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits",
                  "presetConfig": {
                    "types": [
                      { type: 'feat', section: 'Features', hidden: false },
                      { type: 'fix', section: 'Bug Fixes', hidden: false },
                      { type: 'perf', section: 'Performance Improvements', hidden: false },
                      { type: 'revert', section: 'Reverts', hidden: false },
                      { type: 'docs', section: 'Other Updates', hidden: false },
                      { type: 'style', section: 'Other Updates', hidden: false },
                      { type: 'chore', section: 'Other Updates', hidden: false },
                      { type: 'refactor', section: 'Other Updates', hidden: false },
                      { type: 'test', section: 'Other Updates', hidden: false },
                      { type: 'build', section: 'Other Updates', hidden: false },
                      { type: 'ci', section: 'Other Updates', hidden: false }
                    ]
                  }
                }
              ],
              '@semantic-release/npm',
              '@semantic-release/github'
            ]
          pnpm-dest: ${{ steps.pnpm-setup.outputs.dest }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Retrieve text file
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: lint js
        run: pnpm lint

      - name: lint markdown
        run: pnpm lint:md

      - name: run tests
        run: pnpm test

      - shell: bash
        run: git status

      - uses: codfish/actions/npm-publish-pr@fixes
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build package
        run: pnpm build

      - name: Calculate build size
        run: |
          if [ -d "dist" ]; then
            size=$(du -sh dist | cut -f1)
          elif [ -d "build" ]; then
            size=$(du -sh build | cut -f1)
          elif [ -f "package.json" ]; then
            size=$(du -sh . --exclude=node_modules | cut -f1)
          else
            size="unknown"
          fi
          echo "size=$size" >> $GITHUB_OUTPUT
        id: build

      - uses: codfish/actions/comment@v1
        with:
          message: |
            ## ðŸš€ **Build Summary**

            **Build**: âœ… completed successfully
            **Size**: ${{ steps.build.outputs.size }}

            Ready for testing! ðŸŽ‰
          tag: 'build-summary'
          upsert: true
